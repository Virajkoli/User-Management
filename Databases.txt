SQL | NoSQL

SQL : Data is in the form of tables.
    - Implementation : MySQL

NoSQL (Not Only SQL) : Data is in the form of objects.
    - Implementation : MongoDB

Backend : 

Application Server (Node)          // Anything without Data 
+ 
Database Server (MongoDB)          // Whenever data is required to match and verify or fetch / store

Terminologies :

1. Collections : Alag alag projects mei unke alag alag sections ho skte hai. Ex , In Project AS there can be sales , customers , rates , past deliveries , contacts... all these are called Collections of that respective project. Sales Collections , contacts Collections , etc

so , in one database there can be multiple Collections

Database > Collections

2. Document : One entity in a collection is Document
    In customers collection , one customer is a Document

-----------------------------------------------------------------------
CODE                        DATABASE 
-----------------------------------------------------------------------
mongoose.connect            Database Create hota hai
model create                collection create hota hai
CREATE code                 document create hota hai


---------------------------------------------------------------------------------------------
const express = require("express");
const app = express();
const usermodel = require("./usermodel");

// Now based on this model we can perform CRUD

app.get("/" , (req , res) => {
    res.send("heyy");
})

app.get("/create" , async (req , res) => {
    let createdUser = await usermodel.create({
        name : "Sigma",
        username : "sigmaStar",
        email : "chad@gmail.com"
    })

    res.send(createdUser)
})

app.get("/read" , async (req , res) => {
    let users = await usermodel.find()      // This will read all users , If you want to read one user only , you can pass parameter inside the find() method , such as name , username.
    // find() gives array in return even if there is no data inside it
    // You can use findOne() for getting Null and not a array in return if there is no user inside it . If there is a user with matching parameter then it will return that user

    // find() : gives array
    // findOne() : gives object , it wll return only the first occurance of that parameter if there are multiple users with the same name it will only return the first one.

    res.send(users)
})

app.get("/update" , async (req , res) => {
    let updatedUser = await usermodel.findOneAndUpdate({username: "jarvis"} , {name: "Viraj Vinod Koli"} , {new:true})

    res.send(updatedUser)
})

app.get("/delete" , async (req , res) => {
    let users = await usermodel.findOneAndDelete({username:"jarvis"})   //aakhri baar user ke darshan krneko milenge uske baad delete ho jayega
    res.send(users)
})


app.listen(3000)

------------------------------------------------------------------------------------------

usermodel.js :

const mongoose = require('mongoose');

mongoose.connect('mongodb://127.0.0.1:27017/mongopractice');    //mongodb//:localhost/databaseName

const userSchema = mongoose.Schema({
    name : String,
    username : String,
    email : String

})

// This line will export userSchema to other files , we need to export something because we want to perform CRUD operations on another routes , such as C on create route , R on readUser route , etc. So we cannot write CURD operations in this file . So we need to export it.

module.exports = mongoose.model("user" , userSchema);
